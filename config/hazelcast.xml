<?xml version="1.0" encoding="UTF-8"?>
<!-- ~ Copyright (c) 2008-2013, Hazelcast, Inc. All Rights Reserved. ~ ~ 
	Licensed under the Apache License, Version 2.0 (the "License"); ~ you may 
	not use this file except in compliance with the License. ~ You may obtain 
	a copy of the License at ~ ~ http://www.apache.org/licenses/LICENSE-2.0 ~ 
	~ Unless required by applicable law or agreed to in writing, software ~ distributed 
	under the License is distributed on an "AS IS" BASIS, ~ WITHOUT WARRANTIES 
	OR CONDITIONS OF ANY KIND, either express or implied. ~ See the License for 
	the specific language governing permissions and ~ limitations under the License. -->

<!-- The default Hazelcast configuration. This is used when: - no hazelcast.xml 
	if present -->
<hazelcast
	xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-config-3.3.xsd"
	xmlns="http://www.hazelcast.com/schema/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<group>
		<name>skyport</name>
		<password>skyport</password>
	</group>
	<management-center enabled="false">http://192.168.11.18:8085/mancenter
	</management-center>
	<network>
		<port auto-increment="true" port-count="100">5701</port>
		<outbound-ports>
			<!-- Allowed port range when connecting to other nodes. 0 or * means use 
				system provided port. -->
			<ports>0</ports>
		</outbound-ports>
		<join>
			<multicast enabled="false">
				<multicast-group>224.2.2.3</multicast-group>
				<multicast-port>54327</multicast-port>
			</multicast>
			<tcp-ip enabled="false">
				<interface>127.0.0.1</interface>
			</tcp-ip>
			<aws enabled="false">
				<access-key>my-access-key</access-key>
				<secret-key>my-secret-key</secret-key>
				<!--optional, default is us-east-1 -->
				<region>us-west-1</region>
				<!--optional, default is ec2.amazonaws.com. If set, region shouldn't 
					be set as it will override this property -->
				<host-header>ec2.amazonaws.com</host-header>
				<!-- optional, only instances belonging to this group will be discovered, 
					default will try all running instances -->
				<security-group-name>hazelcast-sg</security-group-name>
				<tag-key>type</tag-key>
				<tag-value>hz-nodes</tag-value>
			</aws>
		</join>
		<interfaces enabled="false">
			<interface>10.10.1.*</interface>
		</interfaces>
		<ssl enabled="false" />
		<socket-interceptor enabled="false" />
		<symmetric-encryption enabled="false">
			<!-- encryption algorithm such as DES/ECB/PKCS5Padding, PBEWithMD5AndDES, 
				AES/CBC/PKCS5Padding, Blowfish, DESede -->
			<algorithm>PBEWithMD5AndDES</algorithm>
			<!-- salt value to use when generating the secret key -->
			<salt>thesalt</salt>
			<!-- pass phrase to use when generating the secret key -->
			<password>thepass</password>
			<!-- iteration count to use when generating the secret key -->
			<iteration-count>19</iteration-count>
		</symmetric-encryption>
	</network>
	<partition-group enabled="false" />
	<services enable-defaults="true" />
	<serialization>
		<serializers>
			<serializer type-class="com.infinities.skyport.compute.entity.Cluster">com.infinities.skyport.distributed.impl.hazelcast.serialization.ClusterStreamSerializer
			</serializer>
			<serializer type-class="com.infinities.skyport.compute.entity.ComputeObject">com.infinities.skyport.distributed.impl.hazelcast.serialization.ComputeObjectStreamSerializer
			</serializer>
			<serializer type-class="com.infinities.skyport.compute.entity.Disk">com.infinities.skyport.distributed.impl.hazelcast.serialization.DiskStreamSerializer
			</serializer>
			<serializer type-class="com.infinities.skyport.compute.entity.Host">com.infinities.skyport.distributed.impl.hazelcast.serialization.HostStreamSerializer
			</serializer>
			<serializer type-class="com.infinities.skyport.compute.entity.NetworkAdapter">com.infinities.skyport.distributed.impl.hazelcast.serialization.NetworkAdapterStreamSerializer
			</serializer>
			<serializer type-class="com.infinities.skyport.compute.entity.NetworkStatistics">com.infinities.skyport.distributed.impl.hazelcast.serialization.NetworkStatisticsStreamSerializer
			</serializer>
			<serializer type-class="com.infinities.skyport.compute.entity.Network">com.infinities.skyport.distributed.impl.hazelcast.serialization.NetworkStreamSerializer
			</serializer>
			<serializer type-class="com.infinities.skyport.compute.entity.ResourcePool">com.infinities.skyport.distributed.impl.hazelcast.serialization.ResourcePoolStreamSerializer
			</serializer>
			<serializer type-class="com.infinities.skyport.compute.entity.Statistics">com.infinities.skyport.distributed.impl.hazelcast.serialization.StatisticsStreamSerializer
			</serializer>
			<serializer type-class="com.infinities.skyport.compute.entity.Storage">com.infinities.skyport.distributed.impl.hazelcast.serialization.StorageStreamSerializer
			</serializer>
			<serializer type-class="com.infinities.skyport.compute.entity.Template">com.infinities.skyport.distributed.impl.hazelcast.serialization.TemplateStreamSerializer
			</serializer>
			<serializer type-class="com.infinities.skyport.proxy.VmProxy">com.infinities.skyport.distributed.impl.hazelcast.serialization.VmProxyStreamSerializer
			</serializer>
			<serializer type-class="com.infinities.skyport.compute.entity.Vm">com.infinities.skyport.distributed.impl.hazelcast.serialization.VmStreamSerializer
			</serializer>
			<serializer type-class="java.util.HashSet">com.infinities.skyport.distributed.impl.hazelcast.serialization.HashSetStreamSerializer
			</serializer>
		</serializers>
	</serialization>

	<properties>
		<property name="hazelcast.logging.type">slf4j</property>
	</properties>

</hazelcast>